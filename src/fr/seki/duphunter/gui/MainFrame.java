package fr.seki.duphunter.gui;

import fr.seki.duphunter.IndexController;
import fr.seki.duphunter.IndexModel;
import fr.seki.duphunter.Main;
import fr.seki.duphunter.SimpleExtFileFilter;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.AbstractAction;
import javax.swing.Action;

import static javax.swing.Action.ACCELERATOR_KEY;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;

/**
 *
 * @author Sebastien
 */
public class MainFrame extends javax.swing.JFrame implements Observer {

	private static final long serialVersionUID = -6238977731829675583L;
	private File selectedFile;
    private IndexModel model;
    private IndexController control;
    private final int MENU_MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        model = new IndexModel();
        control = new IndexController(model);
        initComponents();
        model.addObserver(this);
        indexViewerPanel.setModel(model);
        optionsPanel.setModel(model);
        optionsPanel.setModelController(control);
        optionsPanel.setParentFrame(this);
        fileNewMenuItem.setAction(new NewDBAction());
        fileOpenMenuItem.setAction(new ChooseDBAction());
        fileQuitMenuItem.setAction(new QuitAction());
        
        //react to drop files / directories
        frameContent.setDropTarget(new DropTarget() {
            /**
			 * 
			 */
			private static final long serialVersionUID = -3206389188684008811L;

			@Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                Transferable t = dtde.getTransferable();
                try {
                    List<File> fileList = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
                    //consider only first droped file
                    File f = fileList.get(0);
                    if (f.isFile() && f.getName().endsWith("."+model.getDbExtension()))
                        control.openDB(f);
                } catch (UnsupportedFlavorException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        frameContent = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        indexViewerPanel = new fr.seki.duphunter.gui.IndexViewPanel();
        optionsPanel = new fr.seki.duphunter.gui.OptionsPanel();
        jLabel1 = new javax.swing.JLabel();
        dbLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileNewMenuItem = new javax.swing.JMenuItem();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        fileQuitMenuItem = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        helpAboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Select a database");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Duplicate Hunter");
        setLocationByPlatform(true);
        setName("MainFrame"); // NOI18N

        tabbedPane.addTab("View Data", indexViewerPanel);
        tabbedPane.addTab("Options", optionsPanel);

        jLabel1.setText("Database");

        dbLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dbLabel.setText("Not connected");

        javax.swing.GroupLayout frameContentLayout = new javax.swing.GroupLayout(frameContent);
        frameContent.setLayout(frameContentLayout);
        frameContentLayout.setHorizontalGroup(
            frameContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabbedPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frameContentLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dbLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)))
                .addContainerGap())
        );
        frameContentLayout.setVerticalGroup(
            frameContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFile.setText("File");

        fileNewMenuItem.setText("New...");
        menuFile.add(fileNewMenuItem);

        fileOpenMenuItem.setText("Open...");
        menuFile.add(fileOpenMenuItem);

        fileQuitMenuItem.setText("Quit");
        menuFile.add(fileQuitMenuItem);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");
        menuBar.add(menuEdit);

        menuHelp.setText("Help");

        helpAboutMenuItem.setText("About");
        helpAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAbout(evt);
            }
        });
        menuHelp.add(helpAboutMenuItem);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(frameContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(frameContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayAbout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAbout
        ImageIcon icn = new ImageIcon(MainFrame.class.getResource("duplicate_search.png"));
        JOptionPane.showMessageDialog(this, Main.APP_NAME + "\n" 
        									+ Main.VERSION_STR + "\n" 
        									+ Main.APP_COPY, "About this tool", JOptionPane.OK_OPTION, icn);
    }//GEN-LAST:event_displayAbout

    class ChooseDBAction extends AbstractAction {

        /**
		 * 
		 */
		private static final long serialVersionUID = 8374920029299592426L;

		public ChooseDBAction() {
            putValue(NAME, "Open DB...");//same as super("Open...");
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_O, MENU_MASK));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            String cwd = System.getProperty("user.dir");
            fileChooser.setCurrentDirectory(new File(cwd));
            fileChooser.setFileFilter(new SimpleExtFileFilter(model.getDbExtension()));

            int returnVal = fileChooser.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileChooser.getSelectedFile();
                dbSelectedAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
            }
        }
    };

    class NewDBAction extends AbstractAction {

        /**
		 * 
		 */
		private static final long serialVersionUID = -1562963123471982892L;

		public NewDBAction() {
            putValue(NAME, "New DB...");
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_N, MENU_MASK));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            String ext = model.getDbExtension();
            String cwd = System.getProperty("user.dir");
            fileChooser.setCurrentDirectory(new File(cwd));
            fileChooser.setFileFilter(new SimpleExtFileFilter(ext));

            int returnVal = fileChooser.showSaveDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File f = fileChooser.getSelectedFile();
                String path = f.getPath();
                if (!path.toLowerCase().endsWith(ext)) {
                    f = new File(path + "." + ext);
                }
                control.newDB(f);
            }
        }

    }

    class QuitAction extends AbstractAction {

        /**
		 * 
		 */
		private static final long serialVersionUID = -8568645861970241718L;

		public QuitAction() {
            putValue(NAME, "Quit");
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q, MENU_MASK));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            System.exit(0);
        }
    };

    private Action dbSelectedAction = new AbstractAction() {
        /**
		 * 
		 */
		private static final long serialVersionUID = 5418157587599211511L;

		@Override
        public void actionPerformed(ActionEvent e) {
            control.openDB(selectedFile);

        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel dbLabel;
    javax.swing.JFileChooser fileChooser;
    javax.swing.JMenuItem fileNewMenuItem;
    javax.swing.JMenuItem fileOpenMenuItem;
    javax.swing.JMenuItem fileQuitMenuItem;
    javax.swing.JPanel frameContent;
    javax.swing.JMenuItem helpAboutMenuItem;
    fr.seki.duphunter.gui.IndexViewPanel indexViewerPanel;
    javax.swing.JLabel jLabel1;
    javax.swing.JMenuBar menuBar;
    javax.swing.JMenu menuEdit;
    javax.swing.JMenu menuFile;
    javax.swing.JMenu menuHelp;
    fr.seki.duphunter.gui.OptionsPanel optionsPanel;
    javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {

        dbLabel.setText(model.getDbFile().getPath());

    }
}
